-- In this SQL, I am querying a database with multiple tables to quantify statistics about customer and order data.

--How many orders were placed in January?
SELECT COUNT(orderid) FROM BIT_DB.JanSales
WHERE length(orderid) = 6
AND orderid <> 'Order ID';

--How many of those orders were for an iPhone?
SELECT COUNT(orderid) FROM BIT_DB.JanSales
WHERE product = 'iPhone'
AND length(orderid) = 6
AND orderid <> 'Order ID';

--Select the customer account numbers for all the orders that were placed in February
SELECT acctnum FROM BIT_DB.customers as customers
INNER JOIN BIT_DB.FebSales as FebSales
ON customers.order_id = FebSales.orderID;

--Charlotte's response which yields same results
SELECT distinct acctnumb FROM BIT_DB.customers cust
INNER JOIN BIT_DB.FebSales Feb
ON cust.order_id - FEB.orderid
WHERE length(orderid) = 6
AND orderid <> 'Order ID'; 

--Which product was the cheapest one sold in January, and what was the price?
SELECT min(price), product FROM BIT_db.FebSales
WHERE length(orderid) = 6
AND orderid <> 'Order ID';

----Charlotte's response which yields same results
--SELECT distinct Product, price
--FROM BIT_DB.JanSales
--WHERE price in (SELECT min(price) FROM BIT_DB.JanSales);
--In most RDBMS, the software won't allow you to select an aggregate function (like min(price)) along with a non-aggregate function (like product) unless you also have a GROUP BY clause

--What is the total revenue for each product sold in January? 
SELECT jan.product, jan.quantity*jan.price as revenue
FROM BIT_DB.JanSales jan
GROUP BY product;

--Adds the total quantity sold of each item rather than calculating for each order
SELECT sum(quantity)*price as revenue, product
FROM BIT_DB.JanSales
GROUP BY product;

--Which products were sold in february at (specific address), how many of each were sold, and what was the total revenue?
SELECT location, product, sum(quantity), sum(quantity)*price as revenue FROM BIT_DB.FebSales
WHERE location = "548 Lincoln St, Seattle, WA 98101"
GROUP BY Product;

--How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?
SELECT count(distinct cust.acctnum), AVG(feb.price)
FROM customers cust
INNER JOIN FebSales as feb
ON cust.order_id = feb.orderid
WHERE feb.quantity > 2;
--Yielded 312; 1.32 - Did not use quantity in average; Neglected to remove null/messy data

-- CORRECT
SELECT count(distinct acctnum), AVG(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON feb.orderid=cust.order_id
WHERE feb.quantity > 2
AND length(orderid) = 6
AND orderid <> 'Order ID';

--List all the products sold in Los Angeles in February, and include how many of each were sold
SELECT Product, sum(Quantity)
FROM BIT_DB.FebSales
WHERE location like '%Los Angeles%'
GROUP BY Product;

--Which locations in New York received at least 3 orders in January, and how many orders did they receive?
--Incorrect query - did not refer to data for New York vs NY; Did not remove messy data
SELECT distinct location, count(orderid)
FROM BIT_DB.JanSales
HAVING location LIKE '%New York%'
AND count(orderid)>3;

SELECT distinct location, count(orderid)
FROM BIT_DB.JanSales
WHERE location LIKE '%NY%'
AND length (orderid) = 6
AND orderid <> 6
GROUP BY location
HAVING count(orderid) > 2;

--How many of each type of headphone were sold in February?
SELECT PRODUCT, SUM(quantity) as quantity
FROM BIT_DB.FebSales
WHERE product LIKE '%headphones%'
GROUP BY product;

--What was the average amount spent per account in February?
SELECT AVG(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON feb.orderid = cust.order_id
WHERE length(orderid) = 6
AND orderid <> 'Order ID';

-- What was the average quantity of products purchased per account in February?
SELECT sum(quantity)/count(cust.acctnum)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON Feb.orderid = cust.order_id
WHERE length(orderid) = 6
AND orderid <> 'Order ID';

--Which product brought in the most revenue in January and how much revenue did it bring in total?
SELECT product, SUM(quantity*price) as revenue
FROM BIT_DB.JanSales
GROUP BY product
ORDER BY revenue desc LIMIT 1;
